<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018-08-16
 * Time: 16:08
 */

namespace app\header\controller;

class System extends ShopBase
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 绑定微信号
     */
    public function wAccount()
    {
        $list = model("Waccount")->where("header_id", HEADER_ID)->select();
        $this->assign("list", $list);
        $this->assign("totalNum", model("Waccount")->where("header_id", HEADER_ID)->count());
        return $this->fetch();
    }

    /**
     * 更改管理账户
     */
    public function changeAdmin()
    {
        $id = input("id");
        $account = model("Waccount")->where("id", $id)->find();
        if($account){
            model("Waccount")->save(["is_admin"=>0], ["id"=>["neq", $id]]);
            $res = model("Waccount")->save(["is_admin"=>1], ['id'=>$id]);
            if($res){
                exit_json();
            }else{
                exit_json(-1, "操作失败");
            }
        }else{
            exit_json(-1, "账户不存在");
        }

    }

    /**
     * 添加微信账户
     */
    public function addWxAccount()
    {
        return $this->fetch();
    }

    public function saveUser()
    {
        $arr = explode(",", input("oarr"));
        $data = [];
        foreach ($arr as $item){
            $r = model("Waccount")->where("open_id", $item)->find();
            if($r){
                continue;
            }
            $user = model("User")->getUserInfo($item);
            if(!$user){
                continue;
            }
            $t = ["header_id"=>HEADER_ID, "open_id"=>$item, "user_name"=>$user["user_name"]];
            $data[] = $t;
        }
        $res = model("Waccount")->saveAll($data);
        if($res){
            exit_json();
        }else{
            exit_json(-1, "绑定失败");
        }
    }

    /**
     * 取消绑定身份
     */
    public function cancel()
    {
        $id = input("id");
        $res = model("Waccount")->where("id", $id)->find();
        if($res){
            $r = $res->delete();
            if($r){
                exit_json();
            }else{
                exit_json(-1, "删除失败");
            }
        }else{
            exit_json(-1, "用户不存在");
        }
    }

    /**
     * 获取微信账户
     */
    public function getUserList()
    {
        $key = input("key");
        $list = model("User")->whereLike("user_name", "%$key%")->field("open_id, user_name")->select();
        exit(json_encode($list));
    }
    
    

    /**
     * 用户列表
     */
    public function userList()
    {
        $list = model('HeaderEmployee')->where("header_id", session("header_id"))->select();
        $this->assign("list", $list);
        $this->assign("totalNum", count($list));
        return $this->fetch();
    }

    /**
     * 小程序参数设置
     */
    public function wApp()
    {
        $w_app = model('WappConfig')->where('header_id', session(config('headerKey')))->find();
        if (request()->isAjax()) {
            $data = $_POST;
            if ($w_app) {
                $res = $w_app->allowField(true)->save($data);
            } else {
                $data['header_id'] = session(config('leaderKey'));
                $res               = model('WappConfig')->save($data);
            }
            if ($res) {
                exit_json();
            } else {
                exit_json(-1, '操作失败');
            }
        }
        $this->assign('w_app', $w_app);
        return $this->fetch();
    }

    /**
     * 平台参数设置
     */
    public function headerConfig()
    {
        if (request()->isAjax()) {
            $data = input("post.");
            $res  = db("HeaderConfig")->where("header_id", HEADER_ID)->update($data);
            if ($res) {
                exit_json();
            } else {
                exit_json(-1, "设置失败，请重试");
            }
        }
        $con = db("HeaderConfig")->where("header_id", HEADER_ID)->find();
        if (!$con) {
            db("HeaderConfig")->insert(["header_id" => HEADER_ID]);
            $con = db("HeaderConfig")->find(["header_id" => HEADER_ID]);
        }
        $this->assign("con", $con);
        return $this->fetch();
    }

}
