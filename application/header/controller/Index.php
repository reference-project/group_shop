<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/3/19
 * Time: 14:22
 */

namespace app\header\controller;

use app\common\model\HeaderGroup;
use think\Cache;
use think\Log;
use think\Request;

class Index extends ShopBase
{

    private $assign;

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    function index()
    {
        require_once APP_PATH . 'header/leftmenu.php';
        $shop_info = model('Header')->where('id', session(config('headerKey')))->find();
        $this->assign('leftmenu', $leftmenu);
        $this->assign('shopInfo', $shop_info);
        return $this->fetch();
    }

    public function clearCache()
    {
        $res = Cache::clear();
        if ($res) {
            exit_json();
        } else {
            exit_json(-1, "清空失败");
        }

    }

    /**
     * 城主退出
     */
    function logout()
    {
        session(config('headerkey'), null);
        cookie('header_id', null);
        cookie('header_pwd', null);
        return redirect(url('header/Index/index'));
    }

    /**
     * 更改密码
     */
    public function changePassword()
    {
        if (request()->isAjax()) {
            $admin_id = session(config('headerKey'));
            if ($admin_id) {
                $password = input('password');
                $new_password = input('new_password');
                $r = model('Header')->where('id', $admin_id)->find();
                if ($r['password'] != md5($password)) {
                    exit_json(-1, '密码错误');
                } else {
                    $res = $r->save(['password' => md5($new_password)]);
                    if ($res) {
                        session(config('headerKey'), null);
                        exit_json(1, '更改成功');
                    } else {
                        exit_json(-1, '更改失败');
                    }
                }
            } else {
                exit_json(-1, '用户不存在');
            }
        }
        return $this->fetch();
    }


    public function welcome()
    {
        //在售商品数量
        $product_num = model("Product")->where("header_id", HEADER_ID)->where("is_up", 1)->count();
        //平台商品总数量
        $product_total = model("Product")->where("header_id", HEADER_ID)->count();
        //总订单数量
        $order_total = model("Order")->where("header_id", HEADER_ID)->count();
        //今日订单总数量
        $order_today = model("Order")->where("header_id", HEADER_ID)->where("create_time", "gt", strtotime(date("Y-m-d")))->count();
        //最近一月营业额
        $month_day = getMonthDay();
        $month_money = [];
        $month_order = [];
        foreach ($month_day as $value){
            $day_money = model("Order")->where("header_id", HEADER_ID)->where("order_status",1)->where("create_time", "gt", strtotime($value))->where("create_time", "lt", strtotime($value)+86400)->sum("pay_money-refund_money");
            $day_order = model("Order")->where("header_id", HEADER_ID)->where("order_status",1)->where("create_time", "gt", strtotime($value))->where("create_time", "lt", strtotime($value)+86400)->count();
            $month_money[] = $day_money?:0;
            $month_order[] = $day_order?:0;
        }
        $this->assign("product_num", $product_num);
        $this->assign("product_total", $product_total);
        $this->assign("order_total", $order_total);
        $this->assign("order_today", $order_today);
        $this->assign("month_day", json_encode($month_day));
        $this->assign("month_money", json_encode($month_money));
        $this->assign("month_order", json_encode($month_order));
        return $this->fetch();
    }
}